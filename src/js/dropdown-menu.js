/**
 * The addStyleString statement receives a CSS Stylesheet declaration as a
 * string and inserts an style node into de HTML <head> Element with this
 * declaration inside so the developer may include dinamic stylesheets into the
 * document.
 * @param declaration {string}
 */
  var addStyleString = function (declaration) {
    var styleNode = document.createElement('style');
    styleNode.innerHTML = declaration;
    document.head.appendChild(styleNode);
  };

  /**
   * When the user clic on another dropdown menu or toggle the mobile navigation
   * bar the resetMenu statement makes sure to deactivate all the remaining HTML
   * active nodes.
   */
  var resetMenu = function () {
    var activeElements = Array.prototype.slice.call(document.querySelectorAll('ul .active'), 0);

    activeElements.forEach(function (elem) {
      elem.classList.remove('active');
    });

    copyright.classList.toggle('active');
  };

  /**
   * The animate statement is responsible for animating the navigation bar in
   * and out state on mobile devices.
   * @param event {function}
   */
  var animate = function (event) {
    var activeListItem = document.querySelector('.primary-item.active'),
        logo = document.querySelector('.mobile-bar > img'),
        target = event.target,
        elements = [logo, target, navBar, body, content];

    elements.forEach(function (elem) {
      elem.classList.toggle('active');
    });

    menuOpen = !!body.classList.contains('active');
    if (activeListItem) {
      resetMenu();
    }
  };

  /**
   * The hideCurrentSubmenu statement is in charge of hidding the active submenu
   * on the mobile navigation bar when you hit another submenu or close the
   * navigation bar.
   * @param sibling
   */
  var hideCurrentSubmenu = function (sibling) {
    if (currentActiveSubmenu && currentActiveSubmenu !== sibling) {
      currentActiveSubmenu.classList.remove('active');
      event.path[1].classList.remove('active');
      resetMenu();
    }
  };

  /**
   * When the mobile menu is created, the HTML <li> Element that contains the
   * Copyright statement need to be pushed to the bottom taking in mind the
   * whole height of the canvas.
   */
  var fixCopyrightPosition = function () {
    var navBarHeight = document.querySelector('.navbar').clientHeight,
        listHeight = document.querySelector('.primary-nav').clientHeight,
        top = navBarHeight - (listHeight + copyright.clientHeight + 1),
        cssRule = '\n\tli.copyright { top: ' + top + 'px }' +
            '\n\tli.copyright.active { top: 0 }\n';

    addStyleString(cssRule);
  };

  /**
   * The activeSubmenu statement receives two parameters, one HTML Element
   * corresponding to an HTML <ul> Element and an event to their target as a
   * trigger to active the selected submenu.
   * @param sibling {HTMLElement}
   * @param event {function}
   */
  var activeSubmenu = function (sibling, event) {
    hideCurrentSubmenu(sibling);

    event.target.classList.toggle('active');
    sibling.classList.toggle('active');
    event.path[1].classList.toggle('active');
    currentActiveSubmenu = sibling;
  };

  /**
   * The showSubmenu statement uses the event generated by the HTML <li> or <a>
   * Elements to show the selected submenu to the user. As a fault in my design
   * the statement have to check if the clic was over the HTML <li> Element to
   * recursively send the event to the HTML <a> Element and trigger the event.
   * @param event {function}
   */
  var showSubmenu = function (event) {
    var link = event.target.querySelector('a'),
        nextSibling = event.target.nextSibling;

    // Recursive event delegation from the <li> element to the <a>
    if (event.target.tagName === 'LI') {
      event.preventDefault();
      link.click();
      return;
    }

    if (nextSibling) {
      copyright.classList.toggle('active');
      activeSubmenu(nextSibling, event);
    }
  };

  /**
   * The toggleMenu statement controls the event triggered by the hamburger menu
   * on mobile devices.
   * @param event {function}
   */
  var toggleMenu = function (event) {
    if (menuOpen) {
      menuButton.click();
    }
    console.log(getDeviceState());
    copyright.classList.contains('active') && copyright.classList.toggle('active');
    menuOpen = false;
  };

  // Initializer
  var initDropDownMenu = function () {
    var mainList = document.querySelector('.primary-nav');

    menuButton.addEventListener('click', animate, false);
    content.addEventListener('click', toggleMenu, false);
    mainList.addEventListener('click', showSubmenu, false);

    copyright = document.querySelector('.copyright');
    fixCopyrightPosition();
  };